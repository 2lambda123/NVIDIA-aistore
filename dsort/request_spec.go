/*
 * Copyright (c) 2018, NVIDIA CORPORATION. All rights reserved.
 *
 */

// Package dsort provides APIs for distributed archive file shuffling.
package dsort

import "errors"

var (
	errMissingBucket            = errors.New("missing field 'bucket'")
	errStartAfterEnd            = errors.New("'start' cannot be greater than 'end'")
	errNegDigitsToPrependTo     = errors.New("'digits_to_prepend_zeros_to' must be 0 (no prepending) or > 0")
	errInvalidExtension         = errors.New("extension must be one of .tar, .tar.gz, or .tgz")
	errNegOutputShardSize       = errors.New("output shard size must be > 0")
	errInvalidMaxMemPercent     = errors.New("max memory usage percent must be 0 (defaults to 80%) or in the range [1, 100]")
	errNegativeConcurrencyLimit = errors.New("concurrency limit must be 0 (default: no limit) or > 0")
)

// RequestSpec defines the user specification for requests to the endpoint /v1/sort.
type RequestSpec struct {
	// Required
	Bucket               string `json:"bucket"`
	Extension            string `json:"extension"`
	OutputShardSizeBytes int64  `json:"shard_size_bytes"`

	// Optional
	Prefix             string        `json:"prefix"`                          // Default: ""
	OutputNamePrefix   string        `json:"output_name_prefix"`              // Default: ""
	Start              int           `json:"start"`                           // Default: 0
	End                int           `json:"end"`                             // Default: 0
	DigitsToPrependTo  int           `json:"digits_to_prepend_to"`            // Default: 0
	Algorithm          sortAlgorithm `json:"algorithm,omitempty"`             // Default: alphanumeric, increasing
	MaxMemUsagePercent int64         `json:"max_mem_usage_percent,omitempty"` // Default: 80
	IsLocalBucket      bool          `json:"local"`                           // Default: false
	TargetOrderSalt    []byte        `json:"target_order_salt"`               // Default: generated by primary proxy
	ExtractConcLimit   int           `json:"extract_concurrency_limit"`       // Default: 0 (no limit)
	CreateConcLimit    int           `json:"create_concurrency_limit"`        // Default: 0 (no limit)
}

type sortAlgorithm struct {
	Kind       string `json:"kind"`
	Decreasing bool   `json:"decreasing"`
}

// Validate returns a non-nil error if a SortRequest is invalid.
func (rs RequestSpec) Validate() error {
	if rs.Bucket == "" {
		return errMissingBucket
	}
	if rs.Start > rs.End {
		return errStartAfterEnd
	}
	if rs.DigitsToPrependTo < 0 {
		return errNegDigitsToPrependTo
	}
	if rs.Extension != ".tar" && rs.Extension != ".tgz" && rs.Extension != ".tar.gz" {
		return errInvalidExtension
	}
	if rs.OutputShardSizeBytes <= 0 {
		return errNegOutputShardSize
	}
	if rs.MaxMemUsagePercent < 0 || rs.MaxMemUsagePercent > 100 {
		return errInvalidMaxMemPercent
	}
	if rs.ExtractConcLimit < 0 {
		return errNegativeConcurrencyLimit
	}
	if rs.CreateConcLimit < 0 {
		return errNegativeConcurrencyLimit
	}
	return nil
}

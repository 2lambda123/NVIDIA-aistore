image: golang:1.13

.test_long_template: &test_long_def
  stage: test-long
  only:
    - schedules
  after_script:
    - mkdir $CI_PROJECT_DIR/logs
    - find /tmp/ais -type f -name "*log*" -exec cp {} $CI_PROJECT_DIR/logs/ \;
  artifacts:
    when: on_failure
    paths: [logs/]
    expire_in: 2 days

.aws_cli_install: &aws_cli
  - pip3 install awscli --upgrade --user

variables:
  GOPATH: /go
  AIS_NODE_FLAGS: "-skip_startup"
  MODE: debug # run tests with debug asserts

before_script:
  - export PATH="$PATH:$GOPATH/bin"
  - apt-get update -yq
  - apt-get --no-install-recommends -y install curl git sysstat attr build-essential lsof fuse python3-pip python3-setuptools coreutils

stages:
  - build
  - test-short
  - test-long

.default_ref_template: &default_ref_def
  only:
    - master
    - merge_requests
    - schedules

build:linux:
  stage: build
  <<: *default_ref_def
  script:
    - AIS_CLD_PROVIDER="ais" make node
    - AIS_CLD_PROVIDER="aws" make node
    - AIS_CLD_PROVIDER="gcp" make node
    - AIS_CLD_PROVIDER="azure" make node
    - AIS_CLD_PROVIDER="" MODE="" make node # build one node without debug assert (to see if it compiles)
    - make authn
    - make aisfs
    - make cli
    - make aisloader

lint:linux:
  stage: build
  <<: *default_ref_def
  script:
    - pip3 install yapf pylint
    - make lint
    - make fmt-check
    - make spell-check

test:short:
  stage: test-short
  <<: *default_ref_def
  script:
    - *aws_cli
    - make aisfs cli
    - make deploy <<< $'5\n5\n3\n0'
    - DEPLOY_AS_NEXT_TIER="true" make deploy <<< $'1\n1\n3\n0'
    - sleep 3
    - ais attach remote alias=http://127.0.0.1:11080 # attach to remote cluster
    - BUCKET="test" make test-short

test:authn:
  stage: test-short
  only:
    - schedules
  variables:
    AUTH_ENABLED: "true"
    AUTHN_URL: "http://localhost:52001"
    AUTHN_SU_NAME: "admin"
    AUTHN_SU_PASS: "admin"
  script:
    - make cli
    - make deploy <<< $'5\n5\n3\n0'
    - ais auth login $AUTHN_SU_NAME -p $AUTHN_SU_PASS
    - BUCKET="test" RE="TestAuth" make test-run
    - ais auth logout

test:https:
  stage: test-short
  only:
    - schedules
  variables:
    AIS_ENDPOINT: "https://localhost:8080"
    AIS_USE_HTTPS: "true"
    AIS_SERVER_CRT: "$CI_PROJECT_DIR/localhost.crt"
    AIS_SERVER_KEY: "$CI_PROJECT_DIR/localhost.key"
    AIS_SKIP_VERIFY_CRT: "true"
  script:
    - openssl req -x509 -out $AIS_SERVER_CRT -keyout $AIS_SERVER_KEY -newkey rsa:2048 -nodes -sha256 -subj '/CN=localhost' -extensions EXT -config <( printf "[dn]\nCN=localhost\n[req]\ndistinguished_name = dn\n[EXT]\nsubjectAltName=DNS:localhost\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth")
    - make aisfs cli
    - make deploy <<< $'5\n5\n3\n0'
    - DEPLOY_AS_NEXT_TIER="true" make deploy <<< $'1\n1\n3\n0'
    - sleep 3
    - ais attach remote alias=https://127.0.0.1:11080 # attach to remote cluster
    - BUCKET="test" make test-short

test:long:
  <<: *test_long_def
  script:
    - *aws_cli
    - make deploy <<< $'6\n5\n3\n0'
    - BUCKET="test" make test-long

test:cloud:
  <<: *test_long_def
  variables:
    AWS_REGION: "us-west-2"
  script:
    - make deploy <<< $'6\n5\n3\n1'
    - BUCKET="ci-aistore" make test-long

test:soak:
  stage: test-long
  only:
    - schedules
  script:
    - make aisloader
    - make deploy <<< $'5\n5\n3\n0'
    - FLAGS="--short --rec-cycles=1" make test-soak

test:bench:
  stage: test-long
  only:
    - schedules
  script:
    - go get -u golang.org/x/tools/cmd/benchcmp
    - make test-bench

test:kube:
  stage: test-short
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedules"'
    - if: '$CI_MERGE_REQUEST_LABELS =~ /.*transformations.*/' # Add more labels if needed in the future
  variables:
    AIS_ENDPOINT: "localhost:8080"
    AIS_NODE_NAME: "minikube" # WARNING: this is essential for podAffinity to work.
  tags:
    - ais-kube
  script:
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    - chmod +x ./kubectl
    - mv ./kubectl /usr/local/bin/kubectl
    - kubectl version --client
    - kubectl get pods | awk '/tar2tf|echo|minikube/{print $1}' | xargs -r kubectl delete pod # TODO: this can be removed once the lifecylce of transformers is implemented.
    - make deploy <<< $'1\n1\n3\n0'
    - status=0
    - BUCKET="test" RE="TestKube" make test-run || status=$?
    - make kill
    - exit $status # TODO: hack to prevent pod hangs on failures

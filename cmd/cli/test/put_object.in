echo "0123456789" > $OBJECT_1.txt
ais create bucket $BUCKET_1

ais put $OBJECT_1.txt $BUCKET_2/object_1.txt // FAIL "bucket "ais://$BUCKET_2" does not exist"
ais put $OBJECT_1.txt cloud://$BUCKET_1/object_1.txt // FAIL "invalid backend provider "cloud""

head -c 31971520 /dev/urandom | ais put - ais://$BUCKET_1/rand.txt
ais put $OBJECT_1.txt ais://$BUCKET_1/object_1.txt
ais put $OBJECT_1.txt $BUCKET_1/cksum --crc32c 0767345f
ais put $OBJECT_1.txt $BUCKET_1/cksum --crc32c badchecksum // FAIL "BAD DATA CHECKSUM: crc32c(badchecksum != 0767345f)"
ais put $OBJECT_1.txt $BUCKET_1/cksum --md5 3749f52bb326ae96782b42dc0a97b4c1
ais put $OBJECT_1.txt $BUCKET_1/cksum --md5 badchecksum // FAIL "BAD DATA CHECKSUM: md5(badchecksum != 3749f52bb326ae96782b42dc0a97b4c1)"
ais put $OBJECT_1.txt $BUCKET_1/cksum --sha256 dc2bac3ba773b7bc52c20aa85e6ce3ae097dec870e7b9bda03671a1c434b7a5d
ais put $OBJECT_1.txt $BUCKET_1/cksum --sha256 badchecksum // FAIL "BAD DATA CHECKSUM: sha256(badchecksum != dc2bac3ba773b7bc52c20aa85e6ce3ae097dec870e7b9bda03671a1c434b7a5d)"
ais put $OBJECT_1.txt $BUCKET_1/cksum --sha512 e7da5269d4cd882deb8d7b7ca5cbf424047f56815fd7723123482e2931823a68d866627a449a55ca3a18f9c9ba7c8bb6219a028ba3ff5a5e905240907d087e40
ais put $OBJECT_1.txt $BUCKET_1/cksum --sha512 badchecksum // FAIL "BAD DATA CHECKSUM: sha512(badchecksum != e7da5269d4cd882deb8d7b7ca5cbf424047f56815fd7723123482e2931823a68d866627a449a55ca3a18f9c9ba7c8bb6219a028ba3ff5a5e905240907d087e40)"
ais put $OBJECT_1.txt $BUCKET_1/cksum --compute-cksum
ais put $OBJECT_1.txt $BUCKET_1/cksum --xxhash 05967d5390ac53b0
ais put $OBJECT_1.txt $BUCKET_1/cksum --xxhash badchecksum // FAIL "BAD DATA CHECKSUM: xxhash(badchecksum != 05967d5390ac53b0)"

ais put $OBJECT_1.txt $BUCKET_1/object_2.txt
ais ls $BUCKET_1 --props size,version

echo "0" > $OBJECT_1.txt
mkdir -p /tmp/dir1/dir2 && echo "0123456789" > /tmp/dir1/dir2/object_3.txt

ais put $OBJECT_1.txt $BUCKET_1/object_1.txt // Bump the version of 'object_1.txt' object
ais put /tmp/dir1/dir2/object_3.txt $BUCKET_1
ais ls $BUCKET_1 --props size,version

rm -rf /tmp/dir1

# setup files structure for next commands
for d1 in {0..4}; do for d2 in {0..4}; do mkdir -p /tmp/rdir/test$d1/$d2 && echo -n "0" > /tmp/rdir/test$d1/$d2/test.txt; done; done

# test range absolute paths

ais create bucket $BUCKET_2
ais put "/tmp/rdir/test{0..4}/{0..4}/test.txt" $BUCKET_2 -y // IGNORE
RES=0 && for d1 in {0..4}; do for d2 in {0..4}; do ais get $BUCKET_2/test$d1/$d2/test.txt /dev/null && RES=$((RES+1)); done; done && echo $RES

ais put "/tmp/rdir/test{0..4}/{0..4}/test.txt" $BUCKET_2/subdir/ -y // IGNORE
RES=0 && for d1 in {0..4}; do for d2 in {0..4}; do ais get $BUCKET_2/subdir/test$d1/$d2/test.txt /dev/null && RES=$((RES+1)); done; done && echo $RES

# test range relative paths

ais create bucket $BUCKET_3
cd /tmp && ais put "rdir/test{0..2}/{0..2}/test.txt" $BUCKET_3 -y // IGNORE
RES=0 && for d1 in {0..2}; do for d2 in {0..2}; do ais get $BUCKET_3/test$d1/$d2/test.txt /dev/null && RES=$((RES+1)); done; done && echo $RES
cd /tmp && ais put "./rdir/test{0..2}/{0..2}/test.txt" $BUCKET_3/subdir -y // IGNORE
RES=0 && for d1 in {0..2}; do for d2 in {0..2}; do ais get $BUCKET_3/subdirtest$d1/$d2/test.txt /dev/null && RES=$((RES+1)); done; done && echo $RES

# test put * absolute paths

ais create bucket $BUCKET_4
ais put "/tmp/rdir/*.txt" $BUCKET_4 -y -r // IGNORE
RES=0 && for d1 in {0..4}; do for d2 in {0..4}; do ais get $BUCKET_4/test$d1/$d2/test.txt /dev/null && RES=$((RES+1)); done; done && echo $RES
ais put "/tmp/rdir/*.txt" $BUCKET_4/subdir/ -y -r // IGNORE
RES=0 && for d1 in {0..4}; do for d2 in {0..4}; do ais get $BUCKET_4/subdir/test$d1/$d2/test.txt /dev/null && RES=$((RES+1)); done; done && echo $RES

# test put * relative paths

ais create bucket $BUCKET_5
cd /tmp && ais put "rdir/*.txt" $BUCKET_5 -y -r // IGNORE
RES=0 && for d1 in {0..4}; do for d2 in {0..4}; do ais get $BUCKET_5/test$d1/$d2/test.txt /dev/null && RES=$((RES+1)); done; done && echo $RES
cd /tmp && ais put "rdir/*.txt" $BUCKET_5/subdir -y -r // IGNORE
RES=0 && for d1 in {0..4}; do for d2 in {0..4}; do ais get $BUCKET_5/subdirtest$d1/$d2/test.txt /dev/null && RES=$((RES+1)); done; done && echo $RES

rm -rf /tmp/rdir // IGNORE

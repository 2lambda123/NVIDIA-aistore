# coding: utf-8

"""
    DFC

    DFC is a scalable object-storage based caching system with Amazon and Google Cloud backends.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: dfc-jenkins@nvidia.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest

import openapi_client
from openapi_client.api.cluster_api import ClusterApi  # noqa: E501
from openapi_client.rest import ApiException

@unittest.skip("These won't work until the GET APIs are fixed.")
class TestClusterApi(unittest.TestCase):
    """ClusterApi unit test stubs"""

    def setUp(self):
        configuration = openapi_client.Configuration()
        configuration.debug = False
        api_client = openapi_client.ApiClient(configuration)
        self.cluster = openapi_client.api.cluster_api.ClusterApi(api_client)
        self.models = openapi_client.models

    def tearDown(self):
        pass

    def test_target_apis(self):
        """
        1. Get cluster map
        2. Make a valid target and register it
        3. Get cluster map and validate that the target is added
        4. Remove target
        5. Check target removed
        """
        # FIXME: Fix this after get cluster map API is added
        ip = "172.16.174.64"
        port = "8084"
        daemonId = "29040:"+port
        self.cluster.unregister_target("29040:8084")
        node_config = self.models.NodeConfiguration(
            ip,
            port,
            daemonId,
            "http://"+ip+":"+port
        )
        self.cluster.register_target(node_config)

    def test_cluster_config_api(self):
        """
        1. Set config
        2. Get config value to test that it matches the value
        :return:
        """
        # FIXME: Fix this after get config is added
        input_params = self.models.InputParameters(
            self.models.Actions.SETCONFIG,
            "enable_read_range_checksum", "true")
        self.cluster.perform_operation(input_params)

    @unittest.skip("Running this test will cause the cluster to shutdown.")
    def test_cluster_shutdown_api(self):
        """
        Shutdown the cluster.
        :return:
        """
        input_params = self.models.InputParameters(self.models.Actions.SHUTDOWN)
        self.cluster.perform_operation(input_params)

    def test_cluster_rebalance_api(self):
        """
        Rebalance the cluster.
        :return:
        """
        input_params = self.models.InputParameters(
            self.models.Actions.REBALANCE)
        self.cluster.perform_operation(input_params)

    def test_set_primary_proxy(self):
        """
        1. Get primary proxy
        2. Make some other proxy primary
        3. Get primary proxy and verify
        :return:
        """
        # FIXME: Fix this after get cluster map API is added
        self.cluster.set_primary_proxy("29040:8081")

if __name__ == '__main__':
    unittest.main()

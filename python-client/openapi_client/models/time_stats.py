# coding: utf-8

"""
    AIS

    AIS is a scalable object-storage based caching system with Amazon and Google Cloud backends.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: dfcdev@exchange.nvidia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TimeStats(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'total_ms': 'int',
        'count': 'int',
        'min_ms': 'int',
        'max_ms': 'int',
        'avg_ms': 'int'
    }

    attribute_map = {
        'total_ms': 'total_ms',
        'count': 'count',
        'min_ms': 'min_ms',
        'max_ms': 'max_ms',
        'avg_ms': 'avg_ms'
    }

    def __init__(self, total_ms=None, count=None, min_ms=None, max_ms=None, avg_ms=None):  # noqa: E501
        """TimeStats - a model defined in OpenAPI"""  # noqa: E501

        self._total_ms = None
        self._count = None
        self._min_ms = None
        self._max_ms = None
        self._avg_ms = None
        self.discriminator = None

        if total_ms is not None:
            self.total_ms = total_ms
        if count is not None:
            self.count = count
        if min_ms is not None:
            self.min_ms = min_ms
        if max_ms is not None:
            self.max_ms = max_ms
        if avg_ms is not None:
            self.avg_ms = avg_ms

    @property
    def total_ms(self):
        """Gets the total_ms of this TimeStats.  # noqa: E501


        :return: The total_ms of this TimeStats.  # noqa: E501
        :rtype: int
        """
        return self._total_ms

    @total_ms.setter
    def total_ms(self, total_ms):
        """Sets the total_ms of this TimeStats.


        :param total_ms: The total_ms of this TimeStats.  # noqa: E501
        :type: int
        """

        self._total_ms = total_ms

    @property
    def count(self):
        """Gets the count of this TimeStats.  # noqa: E501


        :return: The count of this TimeStats.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this TimeStats.


        :param count: The count of this TimeStats.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def min_ms(self):
        """Gets the min_ms of this TimeStats.  # noqa: E501


        :return: The min_ms of this TimeStats.  # noqa: E501
        :rtype: int
        """
        return self._min_ms

    @min_ms.setter
    def min_ms(self, min_ms):
        """Sets the min_ms of this TimeStats.


        :param min_ms: The min_ms of this TimeStats.  # noqa: E501
        :type: int
        """

        self._min_ms = min_ms

    @property
    def max_ms(self):
        """Gets the max_ms of this TimeStats.  # noqa: E501


        :return: The max_ms of this TimeStats.  # noqa: E501
        :rtype: int
        """
        return self._max_ms

    @max_ms.setter
    def max_ms(self, max_ms):
        """Sets the max_ms of this TimeStats.


        :param max_ms: The max_ms of this TimeStats.  # noqa: E501
        :type: int
        """

        self._max_ms = max_ms

    @property
    def avg_ms(self):
        """Gets the avg_ms of this TimeStats.  # noqa: E501


        :return: The avg_ms of this TimeStats.  # noqa: E501
        :rtype: int
        """
        return self._avg_ms

    @avg_ms.setter
    def avg_ms(self, avg_ms):
        """Sets the avg_ms of this TimeStats.


        :param avg_ms: The avg_ms of this TimeStats.  # noqa: E501
        :type: int
        """

        self._avg_ms = avg_ms

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
